This is the README file for imyplay, a program for playing iMelody
 ringtones (IMY files).

Read the info documentation (type 'info doc/imyplay.info') to get more
 information.

This program is used for playing iMelody ringtones (IMY files),
conforming to the iMelody specification, as written in doc/imelody.txt.
It can also convert IMY ringtones to MIDI files.

IMYplay can use the following libraries to produce sound: the Allegro game
library (http://alleg.sf.net), SDL (Simple DirectMedia Layer;
http://www.libsdl.org), ALSA (Advanced Linux Sound Architecture;
http://alsa-project.org), OSS (Open Sound System), libao
(http://xiph.org/ao/), PortAudiov19 (http://www.portaudio.com/), PulseAudio
(http://www.pulseaudio.org/), JACK1/JACK2 (http://jackaudio.org/),
GStreamer (http://gstreamer.freedesktop.org/, gstreamer-plugin-base required).
It can also write raw samples to an output file, use the PC-speaker or
call an external program on each note.


Author: Bogdan Drozdowski, bogdandr @ op . pl
License: GPLv3+

================================================================

The binary version of libhideip is linked with the GNU C Library,
 licensed under the GNU LGPL:

Copyright (C) 1991,92,93,94,95,96,97,98,99,2000,2001,2002,2003,2004,2005,
 2006,2007 Free Software Foundation, Inc.

The GNU C Library is free software; you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 (at your option) any later version.

The GNU C Library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 License for more details.

You should have received a copy of the GNU Lesser General Public License
 along with the GNU C Library; if not, write to the Free Software Foundation,
 Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

================================================================

The program compiles on:
- Fedora Core 4 GNU/Linux, i686
- Fedora 12 GNU/Linux, i686
- Mandriva 2008.1 GNU/Linux, i686
- OpenBSD 3.8, i586
- Debian 5.0 GNU/Linux, i686

Requirements for compiling the full version under Un*x:

- a non-root account. Please, NEVER compile or 'make' anything as root.

- a working C compiler.

- development package for the C library (like glibc-devel and glibc-headers)
  The getopt.h header and the getopt_long() from it are not required, but
  useful. The signal.h header is used to catch signals, and is optional.
  The translation headers (locale.h, libintl.h or other) are optional.

- the 'make' program

- if you want sound, not just MIDI conversion, a development package for one
  of the supported libraries (except OSS and PC-speaker, which require only
  the C library and system support). If you don't have any of these installed
  or available (check twice), then go to
   	http://alleg.sf.net/		  - for the Allegro library
   	http://www.libsdl.org/		  - for the SDL library
   	http://alsa-project.org/	  - for the ALSA library
   	http://xiph.org/ao/		  - for the AO library
   	http://www.portaudio.com/	  - for the PortAudiov19 library
   	http://www.pulseaudio.org/	  - for the PulseAudio library
   	http://jackaudio.org/		  - for the JACK1/JACK2 library
	http://gstreamer.freedesktop.org/ - for GStreamer

- MIDI output requires the following functions from the standard C library:
  malloc(), realloc(), memset(), memcpy(), fopen(), fwrite(), fseek(),
  fclose() and qsort().

Type './configure' to configure the program for your system. If you do not
 with support for a particular output mechanism, configure the program with

	./configure --enable-XXX=no

 where "XXX" is the output system you wish to disable (allegro, SDL, ALSA,
 OSS, LIBAO, PORTAUDIO, PULSEAUDIO, JACK, MIDI, EXEC, GSTREAMER, FILE, SPKR).

By default, a flex-based scanner will be generated to parse the input file,
 if flex is available. If the scanner does not compile for you or works
 incorrectly (it hangs on binary files, for example), disable it with

	./configure --enable-FLEXPARSER=no

 and recompile imyplay.

If you do NOT wish imyplay to use the network or get the computer's IP
 address, get LibHideIP>=0.2 and LibNetBlock and configure imyplay with

	./configure --enable-LIBHIDEIP --enable-LIBNETBLOCK

NOTE: this may cause network sound output to fail.

Type 'make' to compile the program.

Documentation will be compiled, if you have the 'makeinfo' program
 ('texinfo' package).
Translations will be compiled, if you have the 'gettext' package.

Type 'make install' to install the program. NOTE: 'make install' is
 NOT recommended. Create and install an rpm package instead, if possible.


================================================================

Requirements for automatic compiling the DOS version:

- a working GCC compiler (preferably DJGPP).

- development package for the C library (comes with DJGPP)

- if you want sound, not just MIDI conversion, a development package for one
  of the supported libraries (except PC-speaker, which requires only
  the C library and system support). If you don't have any of these installed
  or available (check twice), then go to
   	http://alleg.sf.net/		- for the Allegro library

- MIDI output requires the following functions from the standard C library:
  malloc(), realloc(), memset(), memcpy(), fopen(), fwrite(), fseek(),
  fclose() and qsort().

- the 'sed' utility (comes with DJGPP)

- the 'zip' utility (comes with DJGPP)

- NASM assembler version >= 2.0 (www.nasm.us)

- the 'upx' utility (upx.sf.net) is optional. The program is compiled
  correctly without it.

To compile under DOS using DJGPP, either enable LFN support or find your
 GCC's "limits.h" file (NOT the standard one) and change the line

	#include "syslimits.h"

to

	#include "syslimit.h"

Then run the "dosdist.bat" file.

If you prefer to compile manually (like when you don't have all of the
 required utilities), then go to the src directory. Change @VERSION@ to
 the current version number in the imyp_cfg.hin file and rename the file
 to imyp_cfg.h. Then compile all the files you wish to (the dosfiles.txt
 file is a good starting point), for example:

	gcc -o imyplay.exe *.c -lalleg

The resulting imyplay.exe is the program to use.


================================================================

Type 'info imyplay' to get help.

Syntax:

	imyplay [options] file.imy [...]

Command line options (for the full version):

-d|--device <dev>	Try to use the given device (ALSA, OSS, GStreamer,
			PC-speaker), driver ID (libao), server name
			(JACK1, PulseAudio) for sound output or the sampling
			rate and samples' format (case-insensitive: s16le,
			s16be, u16le, u16be, s8le, s8be, u8le, u8be), e.g.
			"--dev 44100:s16le" for the FILE, Allegro, PortAudio
			and SDL backends.
-e|--exec <program>	Execute the given program instead of normal sound
			output. Read below for options. Overrides --output.
-f|--file <file>	Write raw samples to this file instead of normal
			sound output. Overrides --output.
-h|--help		Print help
-l|--license		Print license information
--midi-instr <number>	Use the given MIDI instrument number.
-o|--output <system>	Use the given sound output system (allegro, sdl, alsa,
			oss, ao/libao, portaudio/port, jack, pulseaudio/pulse,
			gstreamer/gst, speaker/pcspeaker/spkr/pcspkr). Names
			are NOT case-sensitive. PC-Speaker output may require
			the "snd-pcsp" kernel module to be loaded and
			permissions to access "/dev/console".
--to-midi		Convert the given files to MIDI format (if the target
			file exists, it is deleted). Overrides --output.
-V|--version		Print version number

Alternatively to using the --output option, you can launch the program as
 "imyplay-alsa", "imyplay-allegro" and so on (these can be symbolic links
 or copies of the executable file). This overrides the default order of
 output systems, but does NOT override the --to-midi, -f/--file and
 -e/--exec options.

Executed program's options - you can pass the following expressions in the
<program> argument and these will get substituted by the correct values when
the program is about to be started:

%i - the tone frequency as an integer (rounded), example: 523.
	Zero means a pause.
%f - the tone frequency as a floating point number (accurate),
	example: 523.250916. Zero means a pause.
%d - the tone/pause duration in seconds as an integer (rounded), example: 1.
	This equals to %m divided by 1000.
%s - the tone/pause duration in seconds as a floating point number (accurate),
	example: 1.25. This equals to %l divided by 1000.
%m - the tone/pause duration in milliseconds as an integer (rounded),
	example: 1250. This equals to %d (not rounded) times 1000.
%l - the tone/pause duration in milliseconds as a floating point number
	(accurate), example: 1250.3. This equals to %s (not rounded)
	times 1000.
%v - the tone's volume, form 0 to 15 inclusive.

Any other %X expressions will NOT be altered.

=======================================================

Building an RPM package (the old way):

1) copy the imyplay.spc file to /usr/src/redhat/SPECS
2) copy the source package imyplay-XX.tar.gz to /usr/src/redhat/SOURCES
3) type
	rpmbuild -ba /usr/src/redhat/SPECS/imyplay.spc
4) get the rpms from /usr/src/redhat/RPMS/i386 and /usr/src/redhat/SRPMS

Building an RPM package (the new way):

1) copy the imyplay.spc file to $HOME/rpmbuild/SPECS
2) copy the source package imyplay-XX.tar.gz to $HOME/rpmbuild/SOURCES
3) type
        rpmbuild -ba $HOME/rpmbuild/SPECS/imyplay.spc
4) get the rpms from $HOME/rpmbuild/RPMS/i386 and $HOME/rpmbuild/SRPMS

=======================================================

Translating the docs to your language:

 Type `msginit -i imyplay.pot -o XX.po', substituting your
2-letter language code for 'XX' (e.g. 'pl' or 'de'). This requires the
'gettext' package installed. You can manually copy the file
imyplay.pot to XX.po and manually add the following header, if
you wish.
 In the resulting XX.po file you have to fill in all the fields
marked with capital letters in the header:

# YOUR LANGUAGE translations for imyplay package.
# Copyright (C) 2009-2014 Bogdan 'bogdro' Drozdowski
# This file is distributed under the same license as
# the imyplay package.
# YOUR FULL NAME <EMAILADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: imyplay VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-03-23 18:41+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAILADDRESS>\n"
"Language-Team: LANGUAGE <EMAILADDRESS>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

The rest of the file will contain messages from the program. Translate
them all and send me the resulting XX.po file.

Translating the documentation:
- info: simply change the imyplay.txc file
- man: Unpack the page using 'gunzip imyplay.1.gz' and
  translate the resulting imyplay.1 file.
